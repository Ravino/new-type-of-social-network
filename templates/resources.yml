AWSTemplateFormatVersion: '2010-09-09'
Description: Redis, and any other resources that the chat app needs.
Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: The environment name, used for locating outputs from the
                 prerequisite stacks
Resources:
  ##
  ## REDIS (AWS ElasticCache), Port: 6376
  ##
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Group of subnets to place Redis into
      SubnetIds:
        - Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetOne']]
        - Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetTwo']]
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Redis Security Group"
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'VPCId']]
  RedisIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from Fargate containers
      GroupId: !Ref 'RedisSecurityGroup'
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']]
  Redis:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.m4.large # TODO increase volume
      NumCacheNodes: 2 # TODO change to 3
      CacheSubnetGroupName: !Ref 'RedisSubnetGroup'
      VpcSecurityGroupIds:
        - !GetAtt 'RedisSecurityGroup.GroupId'
      PreferredAvailabilityZones:
        - eu-central-1a
        - eu-central-1b
       #- eu-central-1c  # TODO

  ## 
  ## ROLES
  ## 
  BackWSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: rds-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "rds:*"
              Resource:
                - "*"
        - PolicyName: docdb-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "docdb:*"
              Resource:
                - "*"
        - PolicyName: elasticache-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "elasticache:*"
              Resource:
                - "*"
  BackQueueWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: rds-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "rds:*"
              Resource:
                - "*"
        - PolicyName: docdb-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "docdb:*"
              Resource:
                - "*"
        - PolicyName: elasticache-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "elasticache:*"
              Resource:
                - "*"
  BackApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: rds-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "rds:*"
              Resource:
                - "*"
        - PolicyName: docdb-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "docdb:*"
              Resource:
                - "*"
        - PolicyName: elasticache-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "elasticache:*"
              Resource:
                - "*"
  FrontNginxRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: rds-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "rds:*"
              Resource:
                - "*"
        - PolicyName: docdb-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "docdb:*"
              Resource:
                - "*"
        - PolicyName: elasticache-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "elasticache:*"
              Resource:
                - "*"
Outputs:
  RedisEndpoint:
    Value: !GetAtt 'Redis.RedisEndpoint.Address'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'RedisEndpoint' ] ]
  BackWSRole:
    Value: !GetAtt 'BackWSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'BackWSRole' ] ]
  BackQueueWorkerRole:
    Value: !GetAtt 'BackQueueWorkerRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'BackQueueWorkerRole' ] ]
  BackApiRole:
    Value: !GetAtt 'BackApiRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'BackApiRole' ] ]
  FrontNginxRole:
    Value: !GetAtt 'FrontNginxRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'FrontNginxRole' ] ]