AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, behind a private load balancer.

Parameters:
  # application configuration
  EnvironmentName:
    Type: String
    Default: test
    Description: A name for the environment that this cloudformation will be part of.
                 Used to locate other resources in the same environment.
    AllowedValues:
      - test
      - prod
    ConstraintDescription: Environment name may be only 'test' or 'prod', to prevent
                           configuration files multiplication.
  ServiceName:
    Type: String
    Default: nginx
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image that contains the application process that
                  will handle the traffic for this service
  # load balancing
  Path:
    Type: String
    Default: "*ws-api.plizi.fun*"
    Description: A path on the load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  # load balancing
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  # deployment
  ServiceProtocol:
    Type: String
    Default: HTTP
    Description: Which protocol should be used for service communication
    AllowedValues:
      - HTTP
      - HTTPS
      - TCP
      - TLS
      - UDP
    ConstraintDescription: Only existing internet protocol should be specified as service protocol

  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                access other AWS resources like S3 buckets, DynamoDB tables, etc
Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:
  # A log group for storing the container logs for this service
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [!Ref 'EnvironmentName', 'private', !Ref 'ServiceName']]
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'BackQueueWorkerTaskRole']]
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          Environment:
            - Name: AppDebug
              Value: "0" # Is application in debug mode?
            - Name: AppEnv
              Value: "Development" # Is application in debug mode?: # Type of environment that service running on.
            - Name: ApiUrl
              Value: "https://dev.plizi.fun/" # Path to external api dns.
            - Name: AppKey
              Value: "base64:B+SfHGdTdca+dxR4pzJ2SRrqFpF1gFS/pgZTHNxDbhw" # Application authorization secrets.
            - Name: AppName
              Value: "PLIZI: Социальная сеть" # Application displayable name.
            - Name: AwsAccessKeyId
              Value: "AKIAIBMISJ3W5T6P3ULA" # AWS access key id.
            - Name: AwsSecretAccessKey
              Value: "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" # AWS access secret.
            - Name: AwsDefaultRegion
              Value: "eu-central-1" # AWS region service hosted on.
            - Name: AwsBucket
              Value: "plizibuck" # S2 bucket for assets storing.
            - Name: DbConnection
              Value: "mysql" # Database connection type.
            - Name: JwtBlacklistEnabled
              Value: "1" # JWT blacklist.
            - Name: JwtTtl
              Value: "4320" # JWT TTL.
            - Name: LadaCacheActive
              Value: "0" # Caching dublicated queries.
            - Name: MailEncryption
              Value: "tls" # Mail encryption.
            - Name: MailFromAddress
              Value: "no-reply@plizi.info" # Send emails from address.
            - Name: MailFromName
              Value: "PLIZI Социальная сеть" # Send emails from name.
            - Name: MailHost
              Value: "mail.plizi.info" # Mailer host.
            - Name: MailMailer
              Value: "smtp" # Mailer type.
            - Name: MailPassword
              Value: "fereamea78" # Mail password.
            - Name: MailPort
              Value: "587" # Mailer port.
            - Name: MailUsername
              Value: "no-reply@plizi.info" # Mail username
            - Name: "Neo4DbBoltPort"
              Value: "7687" # Neo4j Graph database bolt port.
            - Name: Neo4DbHost
              Value: "10.10.19.212" # Neo4j Graph database host.
            - Name: Neo4DbHttpPort
              Value: "7474" # Neo4j Graph database http port.
            - Name: Neo4DbPassword
              Value: "zKisCPceY6WzTP1R" # Neo4j Graph database password.
            - Name: Neo4DbUsername
              Value: "neo4j" # Neo4j Graph database username.
            - Name: QueueConnection
              Value: "redis" # Queue connection type [sync redis rebbitmq].
            - Name: SentryLaravelDsn
              Value: "http://89feb2eb67c741c29d06f1204b809e87@ec2-3-125-155-176.eu-central-1.compute.amazonaws.com/2" # Sentry exception logger host.
            - Name: SwooleHttpHost
              Value: "0.0.0.0" # Swoole http host.
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['-', [!Ref 'EnvironmentName', 'private', !Ref 'ServiceName']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
      LaunchType: FARGATE
      PlatformVersion: '1.4.0'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      #HealthCheckIntervalSeconds: 6
      #HealthCheckPath: /
      #HealthCheckProtocol: HTTP
      #HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ServiceName'
      Port: !Ref 'ContainerPort'
      Protocol: !Ref 'ServiceProtocol'
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'VPCId']]

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'PrivateListener']]
      Priority: !Ref 'Priority'
