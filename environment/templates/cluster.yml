AWSTemplateFormatVersion: '2010-09-09'
Description: The baseline resources used to create a Fargate environment
             to launch containerized applications in.

Parameters:
  ProjectName:
    Type: String
    Default: PLIZI
    Description: Project name this cluster belongs to.
  EnvironmentName:
    Type: String
    Default: test
    Description: A name for the environment that this cloudformation will be part of.
  CertificateArn:
    Type: String
    Default: arn:aws:acm:eu-central-1:884088487044:certificate/4444446f-1db7-46ee-b983-cca853830df1
    Description: Forwarded from pipeline.yml during network-creation

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
      AZ: "eu-central-1a"
    PublicTwo:
      CIDR: '10.0.1.0/24'
      AZ: "eu-central-1b"
    PublicThree:
      CIDR: '10.0.1.0/24'
      AZ: "eu-central-1c"

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: !Sub "ITS-${AWS::Region}-VPC"

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap ['SubnetConfig', 'PublicOne', 'AZ']
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      #AssignIpv6AddressOnCreation: false
      #Ipv6CidrBlock: String
      Tags:
        - Key: "Name"
          Value: !Join ["-", ["ITS", !Ref "AWS::Region", "VPC", !Ref "EnvironmentName", !FindInMap ['SubnetConfig', 'PublicOne', 'AZ']]]
      VpcId: !Ref 'VPC'

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap ['SubnetConfig', 'PublicTwo', 'AZ']
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      #AssignIpv6AddressOnCreation: false
      #Ipv6CidrBlock: String
      Tags:
        - Key: "Name"
          Value: !Join ["-", ["ITS", !Ref "AWS::Region", "VPC", !Ref "EnvironmentName", !FindInMap ['SubnetConfig', 'PublicTwo', 'AZ']]]
      VpcId: !Ref 'VPC'

  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap ['SubnetConfig', 'PublicThree', 'AZ']
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true
      #AssignIpv6AddressOnCreation: false
      #Ipv6CidrBlock: String
      Tags:
        - Key: "Name"
          Value: !Join ["-", ["ITS", !Ref "AWS::Region", "VPC", !Ref "EnvironmentName", !FindInMap ['SubnetConfig', 'PublicThree', 'AZ']]]
      VpcId: !Ref 'VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetThree
      RouteTableId: !Ref PublicRouteTable

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the containers we will run in Fargate.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other members of the security group.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngressFromPublicNLB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public NLB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1 # TODO Won't fix -1 for all protocols (VPC only)
      SourceSecurityGroupId: !Ref 'NetworkLoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1 # TODO Won't fix -1 for all protocols (VPC only)
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # Load balancers for getting traffic to containers.
  # This sample template creates one load balancer:
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services


  PublicSubnetOneEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-PublicSubnetOneNLB-${EnvironmentName}-EIP"
  PublicSubnetTwoEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-PublicSubnetTwoNLB-${EnvironmentName}-EIP"
  PublicSubnetThreeEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-PublicSubnetThreeNLB-${EnvironmentName}-EIP"


  NetworkLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1 # TODO Won't fix -1 for all protocols (VPC only)
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      IpAddressType: ipv4
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      SubnetMappings:
        - SubnetId: !Ref PublicSubnetOne
          AllocationId: !GetAtt "PublicSubnetOneEIP.AllocationId"
        - SubnetId: !Ref PublicSubnetTwo
          AllocationId: !GetAtt "PublicSubnetTwoEIP.AllocationId"
        - SubnetId: !Ref PublicSubnetThree
          AllocationId: !GetAtt "PublicSubnetThreeEIP.AllocationId"
      Tags:
         - Key: "Name"
           Value: !Sub "${ProjectName}-NetworkLoadBalancer-${EnvironmentName}-ELB"

  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'EnvironmentName', 'drop-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
  NetworkLoadBalancerListenerHTTP80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'NetworkLoadBalancer'
      Port: 80
      Protocol: HTTP
  NetworkLoadBalancerListenerHTTPS443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'NetworkLoadBalancer'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'
  NetworkLoadBalancerListenerHTTP7070:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'NetworkLoadBalancer'
      Port: 7070
      Protocol: HTTP
  NetworkLoadBalancerListenerHTTPS7070:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'NetworkLoadBalancer'
      Port: 7070
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'
  NetworkLoadBalancerListenerHTTP1215:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'NetworkLoadBalancer'
      Port: 1215
      Protocol: HTTP
  NetworkLoadBalancerListenerHTTPS1215:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'NetworkLoadBalancer'
      Port: 1215
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  # A role used by AWS Autoscaling to get the stats for a Fargate
  # service, and update it to increase or decrease the number of containers
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'ClusterName' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'NetworkLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'ExternalUrl' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'ECSRole' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'ECSTaskExecutionRole' ] ]
  AutoscalingRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'AutoscalingRole' ] ]
  HTTPListener80:
    Description: The ARN of the public load bal ancer's HTTP Listener
    Value: !Ref NetworkLoadBalancerListenerHTTP80
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicListenerHTTP' ] ]
  HTTPSListener443:
    Description: The ARN of the public load balancer's HTTPS Listener
    Value: !Ref NetworkLoadBalancerListenerHTTPS443
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicListenerHTTPS' ] ]
  HTTPListener7070:
    Description: The ARN of the public load bal ancer's HTTP Listener
    Value: !Ref NetworkLoadBalancerListenerHTTP7070
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicListenerHTTP7070' ] ]
  HTTPSListener7070:
    Description: The ARN of the public load balancer's HTTPS Listener
    Value: !Ref NetworkLoadBalancerListenerHTTPS7070
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicListenerHTTPS7070' ] ]
  HTTPListener1215:
    Description: The ARN of the public load bal ancer's HTTP Listener
    Value: !Ref NetworkLoadBalancerListenerHTTP1215
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicListenerHTTP1215' ] ]
  HTTPSListener1215:
    Description: The ARN of the public load balancer's HTTPS Listener
    Value: !Ref NetworkLoadBalancerListenerHTTPS1215
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicListenerHTTPS1215' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicSubnetTwo' ] ]
  PublicSubnetThree:
    Description: Public subnet three
    Value: !Ref 'PublicSubnetThree'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicSubnetThree' ] ]
  PublicSubnetOneAddress:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOneEIP'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicSubnetOneAddress' ] ]
  PublicSubnetTwoAddress:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwoEIP'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicSubnetTwoAddress' ] ]
  PublicSubnetThreeAddress:
    Description: Public subnet three
    Value: !Ref 'PublicSubnetThreeEIP'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicSubnetThreeAddress' ] ]
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'FargateContainerSecurityGroup' ] ]
