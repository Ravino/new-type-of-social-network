AWSTemplateFormatVersion: '2010-09-09'
Description: Stack is triggering by chain creation of all appliation components.
             All stacks created here would be 'nested stacks' and would be linked
             each to other.

Parameters:
  # propogadated parameters
  ProjectName:
    Type: String
    Default: plizi
  # locally used parameters
  GitHubRepo:
    Type: String
    Default: socnet_plizi
  GitHubBranch:
    Type: String
    Default: aws_deploy_v3
  GitHubToken:
    Type: String
    Default: 35a8ae052272bc09c13961af5ec868fa007fab1c
    NoEcho: true
  GitHubUser:
    Type: String
    Default: jadebrrltd
  EnvironmentName:
    Type: String
    Default: test
  CertificateArn:
    Type: String
    Default: arn:aws:acm:eu-central-1:884088487044:certificate/1ec6ec62-ad89-487e-b720-12ff4d445f12
    Description: ARN of the Amazon Certificate Manager SSL certificate to use for this app
  KMSKeyArn:
    Type: String
    Default: arn:aws:kms:eu-central-1:884088487044:key/6d0fcf1c-caf6-487d-97ae-c503395b763d
    Description: ARN of the AWS KMS key for s3

Resources:

  # A role used to give CodeBuild permission to access code,
  # build it, and upload the build results to ECR
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - cloudformation.amazonaws.com
               - codebuild.amazonaws.com
               - elasticfilesystem.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CreateRepository
                  - ecr:InitiateLayerUpload
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
              - Sid: KMSAccess
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource: !Ref KMSKeyArn

  # Role used to give CodePipeline to release a build.
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow codepipeline to put artifacts in the S3 bucket
              # as well as get artifacts back out of it.
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              # Allow codepipeline to build code builds
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              # Allow codepipeline to deploy cloudformation stacks
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet
                Resource: "*"
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:*
              - Sid: KMSAccess
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource: !Ref KMSKeyArn

  # CloudFormation deployment role. This role is passed by CodeBuild to
  # CloudFormation to use when setting up the application resources
  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deploy-stack
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                  - "ec2:*"
                  - "ecs:*"
                  - "ecr:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "rds:*"
                  - "elasticache:*"
                  - "logs:*"
                  - "application-autoscaling:*"
                  - "cloudwatch:*"
                  - "route53:*"
                  - "sns:*"
                  - "sqs:*"
                  - "ssm:*"
                  - "s3:*"
                  - "codebuild:*"
                  - "codedeploy:*"
                  - "codepipeline:*"
                  - "kms: *"
                  - "elasticfilesystem:*"
                Resource: "*"

  # Init ECR registries for usage wit CodeBuild
  LaravelDockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-laravel-docker

  BackWSRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-back-ws

  BackQueueWorkerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-back-queue-worker

  FrontNginxRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-front-nginx

  BackApiRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-back-api


  # While the build is in progress we need a place to store artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::Region}-${ProjectName}-${EnvironmentName}'
      Tags:
        - Key: Type
          Value: Project
        - Key: Name
          Value: !Ref 'ProjectName'
        - Key: Region
          Value: !Ref 'AWS::Region'
        - Key: Environment
          Value: !Ref 'EnvironmentName'
      InventoryConfigurations:
        - Id: WeeklyInventoryConfiguration
          Destination:
            BucketArn: !Join ['-', ['arn:aws:s3:::', !Ref 'AWS::Region', !Ref 'ProjectName', !Ref 'EnvironmentName']] # TODO Possible round-dependency
            Format: CSV
            Prefix: Inventory
          IncludedObjectVersions: Current
          Prefix: Weekly
          ScheduleFrequency: Weekly
          Enabled: true
        - Id: DailyInventoryConfiguration
          Destination:
            BucketArn: !Join ['-', ['arn:aws:s3:::', !Ref 'AWS::Region', !Ref 'ProjectName', !Ref 'EnvironmentName']] # TODO Possible round-dependency
            Format: CSV
            Prefix: Inventory
          IncludedObjectVersions: Current
          Prefix: Daily
          ScheduleFrequency: Daily
          Enabled: true
      LifecycleConfiguration:
        Rules:
          - Id: AbortBrokenData
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Status: Enabled
          - Id: DeleteAfterBecomingNonCurrent
            NoncurrentVersionExpirationInDays: 1095
            NoncurrentVersionTransitions:
              - StorageClass: GLACIER
                TransitionInDays: 182
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 365
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref KMSKeyArn
  # This is the definition of how to build the code in the repository
  LaravelDocker:
   Type: AWS::CodeBuild::Project
   Properties:
     Name: !Join ['-', [!Ref 'ProjectName', !Ref 'AWS::Region', 'laravel-docker', !Ref 'EnvironmentName']]
     ServiceRole: !Ref CodeBuildServiceRole
     EncryptionKey: !Ref KMSKeyArn
     Artifacts:
       Type: CODEPIPELINE
     Source:
       Type: CODEPIPELINE
       BuildSpec: !Sub "environment/build/${EnvironmentName}-buildspec.yml"
     Cache:
       Location: LOCAL
       Modes:
         - LOCAL_DOCKER_LAYER_CACHE
       Type: LOCAL
     Environment:
       Type: LINUX_CONTAINER
       ComputeType: BUILD_GENERAL1_MEDIUM #BUILD_GENERAL1_SMALL
       PrivilegedMode: true
       Image: aws/codebuild/standard:4.0
       ImagePullCredentialsType: CODEBUILD
       EnvironmentVariables:
         - Name: AWS_DEFAULT_REGION
           Value: !Ref AWS::Region
         - Name: AWS_ACCOUNT_ID
           Value: !Ref AWS::AccountId
         - Name: IMAGE_REPO_NAME
           Value: !Ref LaravelDockerRepository
         - Name: IMAGE_TAG
           Value: 'latest'
         - Name: BUILD_WORK_DIR
           Value: ./backend
         - Name: DOCKERFILE_PATH
           Value: docker/
         - Name: ProjectName
           Value: !Ref 'ProjectName'
         - Name: EnvironmentName
           Value: !Ref 'EnvironmentName'
         - Name: ServiceName
           Value: 'laravel-docker'
       # Artifacts:
       #   Type: S3
       #   Location: !GetAtt ''
       #   NamespaceType: BUILD_ID
       #   OverrideArtifactName: true
       #   Packaging: ZIP
     LogsConfig:
       CloudWatchLogs:
         GroupName: !Sub /code-build/${ProjectName}/back-ws
         StreamName: !Sub /code-build/${ProjectName}
         Status: ENABLED
  # This is the definition of how to build the code in the repository
  BackWS:
   Type: AWS::CodeBuild::Project
   Properties:
     Name: !Join ['-', [!Ref 'ProjectName', !Ref 'AWS::Region', 'back-ws', !Ref 'EnvironmentName']]
     ServiceRole: !Ref CodeBuildServiceRole
     EncryptionKey: !Ref KMSKeyArn
     Artifacts:
       Type: CODEPIPELINE
     Source:
       Type: CODEPIPELINE
       BuildSpec: !Sub "environment/build/${EnvironmentName}-buildspec.yml"
     Cache:
       Location: LOCAL
       Modes:
         - LOCAL_DOCKER_LAYER_CACHE
       Type: LOCAL
     Environment:
       Type: LINUX_CONTAINER
       ComputeType: BUILD_GENERAL1_MEDIUM #BUILD_GENERAL1_SMALL
       PrivilegedMode: true
       Image: aws/codebuild/standard:4.0
       ImagePullCredentialsType: CODEBUILD
       EnvironmentVariables:
         - Name: AWS_DEFAULT_REGION
           Value: !Ref AWS::Region
         - Name: AWS_ACCOUNT_ID
           Value: !Ref AWS::AccountId
         - Name: IMAGE_REPO_NAME
           Value: !Ref BackWSRepository
         - Name: IMAGE_TAG
           Value: 'latest'
         - Name: BUILD_WORK_DIR
           Value: ./backend
         - Name: DOCKERFILE_PATH
           Value: docker/back-ws
         - Name: ProjectName
           Value: !Ref 'ProjectName'
         - Name: EnvironmentName
           Value: !Ref 'EnvironmentName'
         - Name: ServiceName
           Value: 'back-ws'
       # Artifacts:
       #   Type: S3
       #   Location: !GetAtt ''
       #   NamespaceType: BUILD_ID
       #   OverrideArtifactName: true
       #   Packaging: ZIP
     LogsConfig:
       CloudWatchLogs:
         GroupName: !Sub /code-build/${ProjectName}/back-ws
         StreamName: !Sub /code-build/${ProjectName}
         Status: ENABLED
  # This is the definition of how to build the code in the repository
  BackQueueWorker:
   Type: AWS::CodeBuild::Project
   Properties:
     ServiceRole: !Ref CodeBuildServiceRole
     EncryptionKey: !Ref KMSKeyArn
     Artifacts:
       Type: CODEPIPELINE
     Source:
       Type: CODEPIPELINE
       BuildSpec: !Sub "environment/build/${EnvironmentName}-buildspec.yml"
     Cache:
       Location: LOCAL
       Modes:
         - LOCAL_DOCKER_LAYER_CACHE
       Type: LOCAL
     Environment:
       Type: LINUX_CONTAINER
       ComputeType: BUILD_GENERAL1_MEDIUM #BUILD_GENERAL1_SMALL
       PrivilegedMode: true
       Image: aws/codebuild/standard:4.0
       ImagePullCredentialsType: CODEBUILD
       EnvironmentVariables:
         - Name: AWS_DEFAULT_REGION
           Value: !Ref AWS::Region
         - Name: AWS_ACCOUNT_ID
           Value: !Ref AWS::AccountId
         - Name: IMAGE_REPO_NAME
           Value: !Ref BackQueueWorkerRepository
         - Name: IMAGE_TAG
           Value: 'latest'
         - Name: BUILD_WORK_DIR
           Value: ./backend
         - Name: DOCKERFILE_PATH
           Value: docker/back-queue-worker
         - Name: ProjectName
           Value: !Ref 'ProjectName'
         - Name: EnvironmentName
           Value: !Ref 'EnvironmentName'
         - Name: ServiceName
           Value: 'back-queue-worker'
     LogsConfig:
       CloudWatchLogs:
         GroupName: !Sub /code-build/${ProjectName}/back-queue-worker
         StreamName: !Sub /code-build/${ProjectName}
         Status: ENABLED
  # Back api pipeline
  BackApi:
   Type: AWS::CodeBuild::Project
   Properties:
     ServiceRole: !Ref CodeBuildServiceRole
     EncryptionKey: !Ref KMSKeyArn
     Artifacts:
       Type: CODEPIPELINE
     Source:
       Type: CODEPIPELINE
       BuildSpec: !Sub "environment/build/${EnvironmentName}-buildspec.yml"
     Cache:
       Location: LOCAL
       Modes:
         - LOCAL_DOCKER_LAYER_CACHE
       Type: LOCAL
     Environment:
       Type: LINUX_CONTAINER
       ComputeType: BUILD_GENERAL1_MEDIUM #BUILD_GENERAL1_SMALL
       PrivilegedMode: true
       Image: aws/codebuild/standard:4.0
       ImagePullCredentialsType: CODEBUILD
       EnvironmentVariables:
         - Name: AWS_DEFAULT_REGION
           Value: !Ref AWS::Region
         - Name: AWS_ACCOUNT_ID
           Value: !Ref AWS::AccountId
         - Name: IMAGE_REPO_NAME
           Value: !Ref BackApiRepository
         - Name: IMAGE_TAG
           Value: 'latest'
         - Name: BUILD_WORK_DIR
           Value: ./backend
         - Name: DOCKERFILE_PATH
           Value: docker/back-api
         - Name: ProjectName
           Value: !Ref 'ProjectName'
         - Name: EnvironmentName
           Value: !Ref 'EnvironmentName'
         - Name: ServiceName
           Value: 'back-api'
       # Artifacts:
       #   Type: S3
       #   Location: !GetAtt ''
       #   NamespaceType: BUILD_ID
       #   OverrideArtifactName: true
       #   Packaging: ZIP
     LogsConfig:
       CloudWatchLogs:
         GroupName: !Sub /code-build/${ProjectName}/back-api
         StreamName: !Sub /code-build/${ProjectName}
         Status: ENABLED
  # Back api pipeline
  FrontNginx:
   Type: AWS::CodeBuild::Project
   Properties:
     ServiceRole: !Ref CodeBuildServiceRole
     EncryptionKey: !Ref KMSKeyArn
     Artifacts:
       Type: CODEPIPELINE
     Source:
       Type: CODEPIPELINE
       BuildSpec: !Sub "environment/build/${EnvironmentName}-buildspec.yml"
     Cache:
       Location: LOCAL
       Modes:
         - LOCAL_DOCKER_LAYER_CACHE
       Type: LOCAL
     Environment:
       Type: LINUX_CONTAINER
       ComputeType: BUILD_GENERAL1_MEDIUM #BUILD_GENERAL1_SMALL
       PrivilegedMode: true
       Image: aws/codebuild/standard:4.0
       ImagePullCredentialsType: CODEBUILD
       EnvironmentVariables:
         - Name: AWS_DEFAULT_REGION
           Value: !Ref AWS::Region
         - Name: AWS_ACCOUNT_ID
           Value: !Ref AWS::AccountId
         - Name: IMAGE_REPO_NAME
           Value: !Ref FrontNginxRepository
         - Name: IMAGE_TAG
           Value: 'latest'
         - Name: BUILD_WORK_DIR
           Value: ./frontend
         - Name: DOCKERFILE_PATH
           Value: docker/front-nginx
         - Name: ProjectName
           Value: !Ref 'ProjectName'
         - Name: EnvironmentName
           Value: !Ref 'EnvironmentName'
         - Name: ServiceName
           Value: 'front-nginx'
       # Artifacts:
       #   Type: S3
       #   Location: !GetAtt ''
       #   NamespaceType: BUILD_ID
       #   OverrideArtifactName: true
       #   Packaging: ZIP
     LogsConfig:
       CloudWatchLogs:
         GroupName: !Sub /code-build/${ProjectName}/front-nginx
         StreamName: !Sub /code-build/${ProjectName}
         Status: ENABLED
  # This pipeline defines the steps to build, deploy, and release the application
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
        EncryptionKey:
          Id: !Ref KMSKeyArn
          Type: KMS
      DisableInboundStageTransitions:
        - StageName: Deploy
          Reason: "We have to make sure images are build in a right way."
      Stages:
        - Name: GitHub
          Actions:
            - Name: Fetch-source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
        - Name: Network
          Actions:
            - Name: VPC
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                #ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-${ProjectName}-cluster-changeset"
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-${ProjectName}-cluster"
                TemplatePath: "Source::environment/templates/infrastructure/vpc.yml"
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: VPCDeployOutput
              RunOrder: 1
            - Name: ECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                #ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-${ProjectName}-cluster-changeset"
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-${ProjectName}-ecs"
                TemplatePath: "Source::environment/templates/infrastructure/ecs-cluster.yml"
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: ClusterDeployOutput
              RunOrder: 1
        # - Name: Databases
        #   Actions:
        #   - Name: Mongo
        #     ActionTypeId:
        #       Category: Deploy
        #       Owner: AWS
        #       Version: '1'
        #       Provider: CloudFormation
        #     Configuration:
        #       ActionMode: CREATE_UPDATE
        #       Capabilities: CAPABILITY_IAM
        #       #ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-mongo-changeset"
        #       RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #       StackName: !Sub "${AWS::Region}-${EnvironmentName}-mongo"
        #       TemplatePath: Source::environment/templates/infrastructure/database-mongo.yml
        #       ParameterOverrides: !Sub |
        #         {
        #           "EnvironmentName": "${EnvironmentName}"
        #         }
        #     InputArtifacts:
        #       - Name: Source
        #     OutputArtifacts:
        #       - Name: MongoDeployOutput
        #     RunOrder: 2
        #   - Name: MySQL
        #     ActionTypeId:
        #       Category: Deploy
        #       Owner: AWS
        #       Version: '1'
        #       Provider: CloudFormation
        #     Configuration:
        #       ActionMode: CREATE_UPDATE
        #       Capabilities: CAPABILITY_IAM
        #       #ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-mysql-changeset"
        #       RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #       StackName: !Sub "${AWS::Region}-${EnvironmentName}-mysql"
        #       TemplatePath: Source::environment/templates/infrastructure/database-mysql.yml
        #       ParameterOverrides: !Sub |
        #         {
        #           "EnvironmentName": "${EnvironmentName}"
        #         }
        #     InputArtifacts:
        #       - Name: Source
        #     OutputArtifacts:
        #       - Name: MySQLDeployOutput
        #     RunOrder: 2
        #   - Name: Redis
        #     ActionTypeId:
        #       Category: Deploy
        #       Owner: AWS
        #       Version: '1'
        #       Provider: CloudFormation
        #     Configuration:
        #       ActionMode: CREATE_UPDATE
        #       Capabilities: CAPABILITY_IAM
        #       #ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-redis-changeset"
        #       RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #       StackName: !Sub "${AWS::Region}-${EnvironmentName}-redis"
        #       TemplatePath: Source::environment/templates/infrastructure/database-redis.yml
        #       ParameterOverrides: !Sub |
        #         {
        #           "EnvironmentName": "${EnvironmentName}"
        #         }
        #     InputArtifacts:
        #       - Name: Source
        #     OutputArtifacts:
        #       - Name: RedisDeployOutput
        #     RunOrder: 2
        # - Name: Infrastructure
        #   Actions:
        #     - Name: NLB
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE
        #         Capabilities: CAPABILITY_IAM
        #         #ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-${ProjectName}-network-load-balancer-changeset"
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         StackName: !Sub "${AWS::Region}-${EnvironmentName}-${ProjectName}-nlb"
        #         TemplatePath: "Source::environment/templates/infrastructure/network-load-balancer.yml"
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}",
        #             "CertificateArn": "${CertificateArn}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: NLBDeployOutput
        #       RunOrder: 1
        #     - Name: ALB
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE
        #         Capabilities: CAPABILITY_IAM
        #         #ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-${ProjectName}-network-load-balancer-changeset"
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         StackName: !Sub "${AWS::Region}-${EnvironmentName}-${ProjectName}-alb"
        #         TemplatePath: "Source::environment/templates/infrastructure/application-load-balancer.yml"
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}",
        #             "CertificateArn": "${CertificateArn}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: ALBDeployOutput
        #       RunOrder: 1
        # - Name: Services
        #   Actions:
        #     - Name: laravel-docker
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CodeBuild
        #       Configuration:
        #         ProjectName: !Ref LaravelDocker
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: LaravelDockerBuildOutput
        #       RunOrder: 1
        #     - Name: back-ws
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CodeBuild
        #       Configuration:
        #         ProjectName: !Ref BackWS
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: BackWSBuildOutput
        #       RunOrder: 2
        #     - Name: back-queue-worker
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CodeBuild
        #       Configuration:
        #         ProjectName: !Ref BackQueueWorker
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: BackQueueWorkerBuildOutput
        #       RunOrder: 2
        #     - Name: back-api
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CodeBuild
        #       Configuration:
        #         ProjectName: !Ref BackApi
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: BackApiBuildOutput
        #       RunOrder: 2
        #     - Name: front-nginx
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CodeBuild
        #       Configuration:
        #         ProjectName: !Ref FrontNginx
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: FrontNginxBuildOutput
        #       RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: back-ws
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE #CHANGE_SET_EXECUTE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-back-ws
                TemplateConfiguration: !Sub "Source::environment/configurations/back-ws/${EnvironmentName}-configuration.json"
                TemplatePath: Source::environment/templates/services/back-ws.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BackWSDeployOutput
              RunOrder: 1
            # - Name: back-queue-worker
            #   ActionTypeId:
            #     Category: Deploy
            #     Owner: AWS
            #     Version: '1'
            #     Provider: CloudFormation
            #   Configuration:
            #     ActionMode: CREATE_UPDATE # CHANGE_SET_EXECUTE
            #     RoleArn: !GetAtt CloudFormationDeployRole.Arn
            #     Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
            #     StackName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-back-queue-worker
            #     #OutputFileName: Source::back-queue-worker/output.json
            #     TemplateConfiguration: !Sub "Source::environment/configurations/back-query-worker/${EnvironmentName}-configuration.json"
            #     TemplatePath: Source::environment/templates/services/back-queue-worker.yml
            #     ParameterOverrides: !Sub |
            #       {
            #         "EnvironmentName": "${EnvironmentName}"
            #       }
            #   InputArtifacts:
            #     - Name: Source
            #   OutputArtifacts:
            #     - Name: BackDBParameterGroupNameQueueWorkerDeployOutput
            #   RunOrder: 1
            - Name: back-api
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE # CHANGE_SET_EXECUTE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                StackName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-back-api
                TemplateConfiguration: !Sub "Source::environment/configurations/back-api/${EnvironmentName}-configuration.json"
                TemplatePath: Source::environment/templates/services/back-api.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BackApiDeployOutput
              RunOrder: 1
            - Name: front-nginx
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE # CHANGE_SET_EXECUTE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                StackName: !Sub ${AWS::Region}-${EnvironmentName}-${ProjectName}-front-nginx
                TemplateConfiguration: !Sub "Source::environment/configurations/front-nginx/${EnvironmentName}-configuration.json"
                TemplatePath: Source::environment/templates/services/front-nginx.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: FrontNginxDeployOutput
              RunOrder: 1

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
