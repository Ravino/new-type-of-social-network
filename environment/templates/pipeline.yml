AWSTemplateFormatVersion: '2010-09-09'
Description: Common pipeline for application assembling and deployment.

Parameters:
  GitHubRepo:
    Type: String
    Default: socnet_plizi
  GitHubBranch:
    Type: String
    Default: aws_deploy
  GitHubToken:
    Type: String
    Default: 35a8ae052272bc09c13961af5ec868fa007fab1c
    NoEcho: true
  GitHubUser:
    Type: String
    Default: jadebrrltd
  EnvironmentName:
    Type: String
    Default: test
  CertificateArn:
    Type: String
    Default: arn:aws:acm:eu-central-1:884088487044:certificate/4444446f-1db7-46ee-b983-cca853830df1
    Description: ARN of the Amazon Certificate Manager SSL certificate to use for this app
  KMSs3KeyArn:
    Type: String
    Default: arn:aws:kms:eu-central-1:884088487044:key/6d0fcf1c-caf6-487d-97ae-c503395b763d
    Description: ARN of the AWS KMS key for s3

Resources:
  # TODO: DeletionPolicy for prod put 'Retain' or 'Snapshot'

  # Create the ECR respository to hold built docker images
  BackWSRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-ws

  BackQueueWorkerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-queue-worker

  FrontNginxRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-front-nginx

  BackApiRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      RepositoryName: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-api

  # A role used to give CodeBuild permission to access code,
  # build it, and upload the build results to ECR
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - cloudformation.amazonaws.com
               - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CreateRepository
                  - ecr:InitiateLayerUpload
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
              - Sid: KMSAccess
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource: !Ref KMSs3KeyArn


  # Role used to give CodePipeline to release a build.
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow codepipeline to put artifacts in the S3 bucket
              # as well as get artifacts back out of it.
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              # Allow codepipeline to build code builds
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              # Allow codepipeline to deploy cloudformation stacks
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet
                Resource: "*"
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:*
              - Sid: KMSAccess
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource: !Ref KMSs3KeyArn

  # CloudFormation deployment role. This role is passed by CodeBuild to
  # CloudFormation to use when setting up the application resources
  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deploy-stack
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                  - "ec2:*"
                  - "ecs:*"
                  - "ecr:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "rds:*"
                  - "elasticache:*"
                  - "logs:*"
                  - "application-autoscaling:*"
                  - "cloudwatch:*"
                  - "route53:*"
                  - "sns:*"
                  - "sqs:*"
                  - "ssm:*"
                  - "s3:*"
                  - "codebuild:*"
                  - "codedeploy:*"
                  - "codepipeline:*"
                  - "kms: *"
                Resource: "*"

  # While the build is in progress we need a place to store artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::Region}-${EnvironmentName}-${AWS::StackName}'
      Tags:
        - Key: Type
          Value: Project
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: Region
          Value: !Ref 'AWS::Region'
        - Key: Environment
          Value: !Ref 'EnvironmentName'
      # Replication bucket should be in different region then current
      # ReplicationConfiguration:
      #   Role: !GetAtt [ArtifactBucketBackupRole, Arn]
      #   Rules:
      #   - Destination:
      #       BucketArn: !GetAtt ['ArtifactBucketMetadata', 'Arn']
      #       StorageClass: GLACIER
      #       Prefix: 'backup'
      #     Status: Enabled
      #   - Destination:
      #       BucketArn: !GetAtt ['ArtifactBucketMetadata', 'Arn']
      #       StorageClass: STANDARD
      #       Prefix: 'replica'
      #     Status: Enabled
      InventoryConfigurations:
        - Id: WeeklyInventoryConfiguration
          Destination:
            BucketArn: !Join ['-', ['arn:aws:s3:::', !Ref 'AWS::Region', !Ref 'EnvironmentName', !Ref 'AWS::StackName']] # TODO Possible round-dependency
            Format: CSV
            Prefix: Inventory
          IncludedObjectVersions: Current
          Prefix: Weekly
          ScheduleFrequency: Weekly
          Enabled: true
        - Id: DailyInventoryConfiguration
          Destination:
            BucketArn: !Join ['-', ['arn:aws:s3:::', !Ref 'AWS::Region', !Ref 'EnvironmentName', !Ref 'AWS::StackName']] # TODO Possible round-dependency
            Format: CSV
            Prefix: Inventory
          IncludedObjectVersions: Current
          Prefix: Daily
          ScheduleFrequency: Daily
          Enabled: true
      LifecycleConfiguration:
        Rules:
          - Id: AbortBrokenData
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Status: Enabled
          - Id: DeleteAfterBecomingNonCurrent
            NoncurrentVersionExpirationInDays: 1095
            NoncurrentVersionTransitions:
              - StorageClass: GLACIER
                TransitionInDays: 182
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 365
            #TagFilters:
            #  - Key: Type
            #    Value: Artifact
            Status: Enabled
      #LoggingConfiguration:
      #AnalyticsConfiguration:
      #QueueConfiguration:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref KMSs3KeyArn
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # Role for artifact backup managent
  # ArtifactBucketBackupRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Path: /
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: s3.amazonaws.com
  #           Action: sts:AssumeRole

  # Policy for artifact backup managent (separate to prevent circular dependency)
  # BucketBackupPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     Path: /
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Action: ['s3:GetReplicationConfiguration', 's3:ListBucket']
  #           Resource:
  #           - !Join ['', ['arn:aws:s3:::', !Ref 'RecordServiceS3Bucket']]
  #         - Effect: Allow
  #           Action: ['s3:GetObjectVersion', 's3:GetObjectVersionAcl']
  #           Resource:
  #           - !Join ['', ['arn:aws:s3:::', !Ref 'RecordServiceS3Bucket', /*]]
  #         - Effect: Allow
  #           Action: ['s3:ReplicateObject', 's3:ReplicateDelete']
  #           Resource:
  #           - !Join ['', ['arn:aws:s3:::', !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName',
  #                   replicationbucket]], /*]]

  # This is the definition of how to build the code in the repository
  BackWS:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Starting up dockerd and linking with socket-tcp endpoints
                - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
                - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
            build:
              commands:
                - echo Current directory `pwd` && echo Changing directory to './backend' && cd ./backend && echo Current directory `pwd`
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f docker/back-ws/Dockerfile .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_URI
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $IMAGE_URI
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref BackWSRepository
          - Name: IMAGE_TAG
            Value: 'latest'
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /code-build/${AWS::StackName}/back-ws
          Status: ENABLED
          StreamName: !Sub /code-build/${AWS::StackName}
      Name: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-ws
      ServiceRole: !Ref CodeBuildServiceRole
      EncryptionKey: !Ref KMSs3KeyArn
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # This is the definition of how to build the code in the repository
  BackQueueWorker:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Starting up dockerd and linking with socket-tcp endpoints
                - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
                - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
            build:
              commands:
                - echo Current directory `pwd` && echo Changing directory to './backend' && cd ./backend && echo Current directory `pwd`
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f docker/back-queue-worker/Dockerfile .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_URI
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $IMAGE_URI
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref BackQueueWorkerRepository
          - Name: IMAGE_TAG
            Value: 'latest'
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /code-build/${AWS::StackName}/back-queue-worker
          Status: ENABLED
          StreamName: !Sub /code-build/${AWS::StackName}
      Name: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-queue-worker
      ServiceRole: !Ref CodeBuildServiceRole
      EncryptionKey: !Ref KMSs3KeyArn
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # Back api pipeline
  BackApi:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Starting up dockerd and linking with socket-tcp endpoints
                - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
                - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
            build:
              commands:
                - echo Current directory `pwd` && echo Changing directory to './backend' && cd ./backend && echo Current directory `pwd`
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f docker/back-api/Dockerfile .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_URI
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $IMAGE_URI
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref BackApiRepository
          - Name: IMAGE_TAG
            Value: 'latest'
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /code-build/${AWS::StackName}/back-api
          Status: ENABLED
          StreamName: !Sub /code-build/${AWS::StackName}
      Name: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-api
      ServiceRole: !Ref CodeBuildServiceRole
      EncryptionKey: !Ref KMSs3KeyArn
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # Back api pipeline
  FrontNginx:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Starting up dockerd and linking with socket-tcp endpoints
                - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
                - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
            build:
              commands:
                - echo Current directory `pwd` && echo Changing directory to './frontend' && cd ./frontend && echo Current directory `pwd`
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f docker/front-nginx/Dockerfile .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_URI
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $IMAGE_URI
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref FrontNginxRepository
          - Name: IMAGE_TAG
            Value: 'latest'
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /code-build/${AWS::StackName}/front-nginx
          Status: ENABLED
          StreamName: !Sub /code-build/${AWS::StackName}
      Name: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-front-nginx
      ServiceRole: !Ref CodeBuildServiceRole
      EncryptionKey: !Ref KMSs3KeyArn
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # This pipeline defines the steps to build, deploy, and release the application
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
        EncryptionKey:
          Id: !Ref KMSs3KeyArn
          Type: KMS
      DisableInboundStageTransitions:
        - StageName: Resources
          Reason: "Disabling ressources assembling before cluster would be ready."
        - StageName: Services
          Reason: "Disabling services assembling before resources would be ready."
        - StageName: Deploy
          Reason: "We have to make sure images are build in a right way."
      Stages:

        # First we have to pull the source code from the Github repository.
        - Name: GitHub
          Actions:
            - Name: Fetch-source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Source
              RunOrder: 1

        # Now we deploy the base resources: the cluster and VPC itself.
        - Name: Cluster
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-${AWS::StackName}-cluster-changeset"
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-${AWS::StackName}-cluster"
                TemplatePath: "Source::environment/templates/cluster.yml"
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}",
                    "CertificateArn": "${CertificateArn}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BaseResourcesDeployOutput
              RunOrder: 1

        # And we deploy the application resources (Elasticache, RDS, DocumentDB, etc)
        - Name: Resources
          Actions:

            - Name: Roles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-${AWS::StackName}-resources-changeset"
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-${AWS::StackName}-resources"
                TemplatePath: Source::environment/templates/roles.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: ChatResourcesDeployOutput
              RunOrder: 1

            - Name: Mongo
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-mongo-changeset"
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-mongo"
                TemplatePath: Source::environment/templates/res-mongo.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: MongoDeployOutput
              RunOrder: 2

            - Name: MySQL
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-mysql-changeset"
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-mysql"
                TemplatePath: Source::environment/templates/res-mysql.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: MySQLDeployOutput
              RunOrder: 2

            - Name: Redis
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub "${AWS::Region}-${EnvironmentName}-redis-changeset"
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-redis"
                TemplatePath: Source::environment/templates/res-redis.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: RedisDeployOutput
              RunOrder: 2

          #- Name: Services
          # Actions:
          #   - Name: back-ws
          #     ActionTypeId:
          #       Category: Build
          #       Owner: AWS
          #       Version: '1'
          #       Provider: CodeBuild
          #     Configuration:
          #       ProjectName: !Ref BackWS
          #     InputArtifacts:
          #       - Name: Source
          #     OutputArtifacts:
          #       - Name: BackWSBuildOutput
          #     RunOrder: 2

          #   - Name: back-queue-worker
          #     ActionTypeId:
          #       Category: Build
          #       Owner: AWS
          #       Version: '1'
          #       Provider: CodeBuild
          #     Configuration:
          #       ProjectName: !Ref BackQueueWorker
          #     InputArtifacts:
          #       - Name: Source
          #     OutputArtifacts:
          #       - Name: BackQueueWorkerBuildOutput
          #     RunOrder: 2

          #   - Name: back-api
          #     ActionTypeId:
          #       Category: Build
          #       Owner: AWS
          #       Version: '1'
          #       Provider: CodeBuild
          #     Configuration:
          #       ProjectName: !Ref BackApi
          #     InputArtifacts:
          #       - Name: Source
          #     OutputArtifacts:
          #       - Name: BackApiBuildOutput
          #     RunOrder: 2

          #   - Name: front-nginx
          #     ActionTypeId:
          #       Category: Build
          #       Owner: AWS
          #       Version: '1'
          #       Provider: CodeBuild
          #     Configuration:
          #       ProjectName: !Ref FrontNginx
          #     InputArtifacts:
          #       - Name: Source
          #     OutputArtifacts:
          #       - Name: FrontNginxBuildOutput
          #     RunOrder: 2

        # Finally we deploy the Fargate service to the cluster
        # - Name: Deploy
        #   Actions:
        #     - Name: back-ws
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE #CHANGE_SET_EXECUTE
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         StackName: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-ws
        #         TemplatePath: Source::environment/templates/back-ws.yml
        #         Capabilities: CAPABILITY_IAM
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: BackWSDeployOutput
        #       RunOrder: 1

        #     - Name: back-queue-worker
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE # CHANGE_SET_EXECUTE
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
        #         StackName: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-queue-worker
        #         #OutputFileName: Source::back-queue-worker/output.json
        #         #TemplateConfiguration: Source::back-queue-worker/configuration.json
        #         TemplatePath: Source::environment/templates/back-queue-worker.yml
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: BackQueueWorkerDeployOutput
        #       RunOrder: 1

        #     - Name: back-api
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE # CHANGE_SET_EXECUTE
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
        #         StackName: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-back-api
        #         TemplatePath: Source::environment/templates/back-api.yml
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: BackApiDeployOutput
        #       RunOrder: 1

        #     - Name: front-nginx
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: '1'
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE # CHANGE_SET_EXECUTE
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
        #         StackName: !Sub ${AWS::Region}-${EnvironmentName}-${AWS::StackName}-front-nginx
        #         TemplatePath: Source::environment/templates/front-nginx.yml
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: FrontNginxDeployOutput
        #       RunOrder: 1

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
