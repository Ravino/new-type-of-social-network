AWSTemplateFormatVersion: '2010-09-09'
Description: Common pipeline for application assembling and deployment.

Parameters:
  GitHubRepo:
    Type: String
    Default: socnet_plizi
  GitHubBranch:
    Type: String
    Default: aws_deploy
  GitHubToken:
    Type: String
    Default: 503ea673baa2189031f13ebb1cf778c5efe7169c
    NoEcho: true
  GitHubUser:
    Type: String
    Default: jadebrrltd
  EnvironmentName:
    Type: String
    Default: test
  CertificateArn:
    Type: String
    Default: arn:aws:acm:eu-central-1:884088487044:certificate/4444446f-1db7-46ee-b983-cca853830df1
    Description: ARN of the Amazon Certificate Manager SSL certificate to use for this app

Resources:
  # TODO: DeletionPolicy for prod put 'Retain' or 'Snapshot'

  # Create the ECR respository to hold built docker images
  BackWSRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-back-ws

  BackQueueWorkerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-back-queue-worker

  FrontNginxRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-front-nginx

  BackApiRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-back-api

  # A role used to give CodeBuild permission to access code,
  # build it, and upload the build results to ECR
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:*
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  # Role used to give CodePipeline to release a build.
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow codepipeline to put artifacts in the S3 bucket
              # as well as get artifacts back out of it.
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              # Allow codepipeline to build code builds
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              # Allow codepipeline to deploy cloudformation stacks
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet
                Resource: "*"

  # CloudFormation deployment role. This role is passed by CodeBuild to
  # CloudFormation to use when setting up the application resources
  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deploy-stack
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                  - "ec2:*"
                  - "ecs:*"
                  - "ecr:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "rds:*"
                  - "elasticache:*"
                  - "logs:*"
                  - "application-autoscaling:*"
                  - "cloudwatch:*"
                  - "route53:*"
                  - "sns:*"
                  - "sqs:*"
                  - "ssm:*"
                Resource: "*"

  # While the build is in progress we need a place to store artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::Region}-${AWS::StackName}'
      Tags: 
        - Key: Type
          Value: Project
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: Region
          Value: !Ref 'AWS::Region'
        - Key: Environment
          Value: !Ref 'EnvironmentName'
      # Replication bucket should be in different region then current
      # ReplicationConfiguration:
      #   Role: !GetAtt [ArtifactBucketBackupRole, Arn]
      #   Rules:
      #   - Destination:
      #       BucketArn: !GetAtt ['ArtifactBucketMetadata', 'Arn']
      #       StorageClass: GLACIER
      #       Prefix: 'backup'
      #     Status: Enabled
      #   - Destination:
      #       BucketArn: !GetAtt ['ArtifactBucketMetadata', 'Arn']
      #       StorageClass: STANDARD
      #       Prefix: 'replica'
      #     Status: Enabled
      InventoryConfigurations:
        - Id: WeeklyInventoryConfiguration
          Destination:
            BucketArn: !Join ['-', ['arn:aws:s3:::', !Ref 'AWS::Region', !Ref 'AWS::StackName']] # TODO Possible round-dependency
            Format: CSV
            Prefix: Inventory
          IncludedObjectVersions: Current
          Prefix: Weekly
          ScheduleFrequency: Weekly
          Enabled: true
        - Id: DailyInventoryConfiguration
          Destination:
            BucketArn: !Join ['-', ['arn:aws:s3:::', !Ref 'AWS::Region', !Ref 'AWS::StackName']] # TODO Possible round-dependency
            Format: CSV
            Prefix: Inventory
          IncludedObjectVersions: Current
          Prefix: Daily
          ScheduleFrequency: Daily
          Enabled: true
      LifecycleConfiguration:
        Rules:
          - Id: AbortBrokenData
            AbortIncompleteMultipartUpload: 
              DaysAfterInitiation: 1
            Status: Enabled
          - Id: DeleteAfterBecomingNonCurrent
            NoncurrentVersionExpirationInDays: 1095
            NoncurrentVersionTransitions: 
              - StorageClass: GLACIER
                TransitionInDays: 182
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 365
            #TagFilters: 
            #  - Key: Type
            #    Value: Artifact
            Status: Enabled
      #LoggingConfiguration: 
      #AnalyticsConfiguration:
      #QueueConfiguration:
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # Role for artifact backup managent
  # ArtifactBucketBackupRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Path: /
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: s3.amazonaws.com
  #           Action: sts:AssumeRole
  
  # Policy for artifact backup managent (separate to prevent circular dependency)
  # BucketBackupPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     Path: /
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Action: ['s3:GetReplicationConfiguration', 's3:ListBucket']
  #           Resource:
  #           - !Join ['', ['arn:aws:s3:::', !Ref 'RecordServiceS3Bucket']]
  #         - Effect: Allow
  #           Action: ['s3:GetObjectVersion', 's3:GetObjectVersionAcl']
  #           Resource:
  #           - !Join ['', ['arn:aws:s3:::', !Ref 'RecordServiceS3Bucket', /*]]
  #         - Effect: Allow
  #           Action: ['s3:ReplicateObject', 's3:ReplicateDelete']
  #           Resource:
  #           - !Join ['', ['arn:aws:s3:::', !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName',
  #                   replicationbucket]], /*]]

  # This is the definition of how to build the code in the repository
  BackWS:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}" ./backend/docker/back-ws
            post_build:
              commands:
                - docker push "$IMAGE_URI"
                - printf '{"ImageUri":"%s"}' "$IMAGE_URI" > build.json
          artifacts:
            files: build.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:19.03.8
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackWSRepository}
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /code-build/${AWS::StackName}/back-ws
          Status: ENABLED
          StreamName: !Sub /code-build/${AWS::StackName}
      Name: !Sub ${AWS::StackName}-back-ws
      ServiceRole: !Ref CodeBuildServiceRole
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # This is the definition of how to build the code in the repository
  BackQueueWorker:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}" ./backend/docker/back-queue-worker
            post_build:
              commands:
                - docker push "$IMAGE_URI"
                - printf '{"ImageUri":"%s"}' "$IMAGE_URI" > build.json
          artifacts:
            files: build.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:19.03.8
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackQueueWorkerRepository}
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /code-build/${AWS::StackName}/back-queue-worker
          Status: ENABLED
          StreamName: !Sub /code-build/${AWS::StackName}
      Name: !Sub ${AWS::StackName}-back-queue-worker
      ServiceRole: !Ref CodeBuildServiceRole
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # Back api pipeline
  BackApi:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}" ./backend/docker/back-api
            post_build:
              commands:
                - docker push "$IMAGE_URI"
                - printf '{"ImageUri":"%s"}' "$IMAGE_URI" > build.json
          artifacts:
            files: build.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:19.03.8
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackApiRepository}
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /code-build/${AWS::StackName}/back-api
          Status: ENABLED
          StreamName: !Sub /code-build/${AWS::StackName}
      Name: !Sub ${AWS::StackName}-back-api
      ServiceRole: !Ref CodeBuildServiceRole
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # Back api pipeline
  FrontNginx:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}" ./frontend/docker/front-nginx
            post_build:
              commands:
                - docker push "$IMAGE_URI"
                - printf '{"ImageUri":"%s"}' "$IMAGE_URI" > build.json
          artifacts:
            files: build.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:19.03.8
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FrontNginxRepository}
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /code-build/${AWS::StackName}/front-nginx
          Status: ENABLED
          StreamName: !Sub /code-build/${AWS::StackName}
      Name: !Sub ${AWS::StackName}-front-nginx
      ServiceRole: !Ref CodeBuildServiceRole
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # This pipeline defines the steps to build, deploy, and release the application
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      DisableInboundStageTransitions: 
        - StageName: Resources 
          Reason: "Disabling ressources assembling before cluster would be ready."
        - StageName: Services 
          Reason: "Disabling services assembling before resources would be ready."
        - StageName: Deploy
          Reason: "We have to make sure images are build in a right way."
      Stages:

        # First we have to pull the source code from the Github repository.
        - Name: GitHub
          Actions:
            - Name: Fetch-source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Source
              RunOrder: 1

        # Now we deploy the base resources: the cluster and VPC itself.
        - Name: Cluster
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub "${AWS::Region}-${AWS::StackName}-cluster"
                TemplatePath: "Source::environment/templates/cluster.yml"
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}",
                    "CertificateArn": "${CertificateArn}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BaseResourcesDeployOutput
              RunOrder: 1

        # And we deploy the application resources (Elasticache, RDS, DocumentDB, etc)
        - Name: Resources
          Actions:

            - Name: Roles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-resources"
                TemplatePath: Source::environment/templates/resources.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: ChatResourcesDeployOutput
              RunOrder: 1

            - Name: Mongo
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-mongo"
                TemplatePath: Source::environment/templates/res-mongo.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: MongoDeployOutput
              RunOrder: 2

            - Name: MySQL
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-mysql"
                TemplatePath: Source::environment/templates/res-mysql.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: MySQLDeployOutput
              RunOrder: 2
        
            - Name: Redis
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::Region}-${EnvironmentName}-redis"
                TemplatePath: Source::environment/templates/res-redis.yml
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: RedisDeployOutput
              RunOrder: 2

        # And we deploy the application resources (Elasticache, RDS, DocumentDB, etc)
        - Name: Services
          Actions:
            # Build the chat frontend docker image
            - Name: back-ws
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BackWS
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BackWSBuildOutput
              RunOrder: 2

            # Build the backend worker image
            - Name: back-queue-worker
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BackQueueWorker
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BackQueueWorkerBuildOutput
              RunOrder: 2

            # Build the backend worker image
            - Name: back-api
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BackApi
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BackApiBuildOutput
              RunOrder: 2

            # Build the backend worker image
            - Name: front-nginx
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref FrontNginx
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: FrontNginxBuildOutput
              RunOrder: 2

        # Finally we deploy the Fargate service to the cluster
        - Name: Deploy
          Actions:
            - Name: back-ws
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${EnvironmentName}-back-ws
                TemplatePath: Source::environment/templates/back-ws.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}",
                    "ImageUrl":{"Fn::GetParam":["BackWSBuildOutput","build.json","ImageUri"]}
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BackWSDeployOutput
              RunOrder: 1

            - Name: back-queue-worker
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                OutputFileName: Source::back-queue-worker/output.json
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${EnvironmentName}-back-queue-worker
                #TemplateConfiguration: Source::back-queue-worker/configuration.json
                TemplatePath: Source::environment/templates/back-queue-worker.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}",
                    "ImageUrl":{"Fn::GetParam":["BackQueueWorkerBuildOutput","build.json","ImageUri"]}
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BackQueueWorkerDeployOutput
              RunOrder: 1

            - Name: back-api
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${EnvironmentName}-back-api
                TemplatePath: Source::environment/templates/back-api.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}",
                    "ImageUrl":{"Fn::GetParam":["BackApiBuildOutput","build.json","ImageUri"]}
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BackApiDeployOutput
              RunOrder: 2

            - Name: front-nginx
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${EnvironmentName}-front-nginx
                TemplatePath: Source::environment/templates/front-nginx.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}",
                    "ImageUrl":{"Fn::GetParam":["FrontNginxBuildOutput","build.json","ImageUri"]}
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: FrontNginxDeployOutput
              RunOrder: 2

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}