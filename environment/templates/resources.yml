AWSTemplateFormatVersion: '2010-09-09'
Description: Redis, and any other resources that the chat app needs.
Parameters:
  EnvironmentName:
    Type: String
    Default: test
    Description: The environment name, used for locating outputs from the
                 prerequisite stacks

  MySQLDBName:
    Type: String
    Default: 'dev-plizi'
    Description: MySQLDB database default name.
  MySQLDBMasterUsername:
    Type: String
    Default: 'root'
    Description: MySQLDB admin user name.
  MySQLDBMasterUserPassword:
    Type: String
    Default: 'ecugVWHKatKQd657'
    NoEcho: true
    Description: MySQLDB admin user password.

  MongoDBMasterUsername:
    Type: String
    Default: 'plizi'
    Description: MongoDB admin user name.
  MongoDBMasterUserPassword:
    Type: String
    Default: 'Tksx2PPDba8Ny0lZ'
    NoEcho: true
    Description: MongoDB admin user password.
# TODO Highload: UPDATE Service cluster Resources and IO
# TODO Highload: UPDATE DB-cluster Resources and IO
Resources:
  ##
  ## REDIS (AWS ElasticCache), Port: 6376
  ##
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Group of subnets to place Redis into
      SubnetIds:
        - Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetOne']]
        - Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetTwo']]
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Redis Security Group"
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'VPCId']]
  RedisIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from Fargate containers
      GroupId: !Ref 'RedisSecurityGroup'
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']]
  Redis:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.m4.large # TODO increase volume
      NumCacheNodes: 2 # TODO change to 3
      CacheSubnetGroupName: !Ref 'RedisSubnetGroup'
      VpcSecurityGroupIds:
        - !GetAtt 'RedisSecurityGroup.GroupId'    # TIDO consider about using FargateContainerSecurityGroup instead
      PreferredAvailabilityZones:
        - eu-central-1a
        - eu-central-1b
       #- eu-central-1c  # TODO
  ## 
  # ## RDS (MySQL) Port: 3306
  # ##
  # MySQLSubnetGroup:
  #   Type: "AWS::RDS::DBSubnetGroup"
  #   Properties:
  #     DBSubnetGroupDescription: description #required
  #     SubnetIds: #required
  #       - Fn::ImportValue:
  #           !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetOne']]
  #       - Fn::ImportValue:
  #           !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetTwo']]       
  # MySQLSecurityGroup:
  #   Type: "AWS::RDS::DBSecurityGroup"
  #   Properties:
  #     DBSecurityGroupIngress: #required
  #       - 
  #         EC2SecurityGroupId: 
  #           Fn::ImportValue:
  #             !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']]
  #         #EC2SecurityGroupName: !Ref 'FargateContainerSecurityGroup'
  #     EC2VpcId: 
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'EnvironmentName', 'VPCId']]
  #     GroupDescription: description #required
  # MySQLIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'MySQLSecurityGroup'
  #     IpProtocol: tcp
  #     FromPort: 3306
  #     ToPort: 3306
  #     SourceSecurityGroupId:
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']]
  MySQL:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '10' # TODO Adjust for highload. GB of storage
      DBInstanceClass: db.m4.large
      Engine: MySQL
      #DBSnapshotIdentifier: !Ref 'MySQLDBName'
      DBName: !Ref 'MySQLDBName'
      MasterUsername: !Ref 'MySQLDBMasterUsername'
      MasterUserPassword: !Ref 'MySQLDBMasterUserPassword'
      VPCSecurityGroups:
        - Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']] # Possibly have to provide VPCid itself
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot # TODO Check how does it works with table updates
  ##
  ## DocumentDB (Mongo) Port 27017
  ##
  MongoSubnetGroup:
    Type: "AWS::DocDB::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: 'Description of MongoSubnetGroup'
      SubnetIds: #required
        - Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetOne']]
        - Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetTwo']]
  MongoDB:
    Type: "AWS::DocDB::DBCluster"
    Properties:
      StorageEncrypted: true
      AvailabilityZones:
        - eu-central-1a
        - eu-central-1b
       #- eu-central-1c  # TODO
      Port: 27017
      #DBClusterIdentifier: String
      DBSubnetGroupName: MongoSubnetGroup
      DeletionProtection: false
      MasterUsername: !Ref 'MongoDBMasterUsername' #required
      MasterUserPassword: !Ref 'MongoDBMasterUserPassword' #required
      VpcSecurityGroupIds:
        - Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']] # Possibly have to provide VPCid itself
  MongoInstance:
    Type: "AWS::DocDB::DBInstance"
    Properties:
      DBInstanceClass: db.r4.large # TODO: Adjust on highload results
      DBClusterIdentifier: !Ref 'MongoDB' #required
  ## 
  ## ROLES
  ## 
  BackWSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: database-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - rds:*
                - docdb:*
                - elasticache:*
              Resource: "*"
  BackQueueWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: database-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - rds:*
                - docdb:*
                - elasticache:*
              Resource: "*"
  BackApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: database-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - rds:*
                - docdb:*
                - elasticache:*
              Resource: "*"
  FrontNginxRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: database-full-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - rds:*
                - docdb:*
                - elasticache:*
              Resource: "*"
              
Outputs:
  MongoDBName: 
    Value: 'admin'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MongoDBName' ] ]
  MongoDBHost: 
    Value: !GetAtt 'MongoDB.Endpoint' # TODO Possibly should be changed to MongoInstance.Endpoint
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MongoDBHost' ] ]
  MongoDBUser: 
    Value: !Ref 'MongoDBMasterUsername'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MongoDBUser' ] ]
  MongoDBPass: 
    Value: !Ref 'MongoDBMasterUserPassword'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MongoDBPass' ] ]

  MySQLDBName: 
    Value: !Ref 'MySQLDBName'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MySQLDBName' ] ]
  MySQLDBUserName: 
    Value: !Ref 'MySQLDBMasterUsername'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MySQLDBUser' ] ]
  MySQLDBUserPass: 
    Value: !Ref 'MySQLDBMasterUserPassword'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MySQLDBPass' ] ]
  MySQLDBHost: 
    Value: !GetAtt 'MySQL.Endpoint.Address'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MySQLDBHost' ] ]
  MySQLDBPort: 
    Value: !GetAtt 'MySQL.Endpoint.Port'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'MySQLDBPort' ] ]

  RedisHost:
    Value: !GetAtt 'Redis.RedisEndpoint.Address'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'RedisHost' ] ]
  RedisPort:
    Value: !GetAtt 'Redis.RedisEndpoint.Port'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'RedisPort' ] ]

  BackWSRole:
    Value: !GetAtt 'BackWSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'BackWSRole' ] ]
  BackQueueWorkerRole:
    Value: !GetAtt 'BackQueueWorkerRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'BackQueueWorkerRole' ] ]
  BackApiRole:
    Value: !GetAtt 'BackApiRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'BackApiRole' ] ]
  FrontNginxRole:
    Value: !GetAtt 'FrontNginxRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'FrontNginxRole' ] ]