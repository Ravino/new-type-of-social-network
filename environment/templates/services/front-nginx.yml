AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Service managed with Fargate launch type

Parameters:
  # application configuration
  EnvironmentName:
    Type: String
    Default: test
    Description: A name for the environment that this cloudformation will be part of.
                 Used to locate other resources in the same environment.
    AllowedValues:
      - test
      - prod
    ConstraintDescription: Environment name may be only 'test' or 'prod', to prevent
                           configuration files multiplication.
  # Route 53
  DomainName:
    Type: String
    Description: The specific alias name for the application
  SubDomainNameOne:
    Type: String
    Default: ""
    Description: The specific alias name for the application service container One itself
  # stack-related parameters
  # application configuration
  ServiceName:
    Type: String
    Default: service
    Description: A name for the service that would be managing FARGATE tasks inside the cluster.
  # deployment
  ImageUrl:
    Type: String
    Default: 'busybox'
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  # deployment
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application the docker container is binding to
  # deployment
  ContainerProtocol:
    Type: String
    Default: HTTP
    Description: Which protocol should be used for service communication
  # resources management
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  # resources management
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  # load balancing
  Path:
    Type: String
    Description: A path on the load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  # load balancing
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  # auto-scaling
  MinCapacity:
    Type: Number
    Default: 1
    Description: How many copies is min setupped to run
  # auto-scaling
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  # auto-scaling
  MaxCapacity:
    Type: Number
    Default: 5
    Description: How many copies is max allowed to run
  # auto-scaling
  LowCpuPeriodAlarm:
    Type: Number
    Default: 300
    Description: Period length (in seconds) that limit value encounters as once noticed
  # auto-scaling
  ScaleDownCooldown:
    Type: Number
    Default: 300
    Description: Cooldown before next scaling down
  # auto-scaling
  LowCpuThresholdAlarm:
    Type: Number
    Default: 20
    Description: Limit value that indicates, that alarm action should be applied
  # auto-scaling
  HighCpuPeriodAlarm:
    Type: Number
    Default: 60
    Description: Period length (in seconds) that limit value encounters as once noticed
  # auto-scaling
  HighCpuThresholdAlarm:
    Type: Number
    Default: 70
    Description: Limit value that indicates, that alarm action should be applied
  # auto-scaling
  ScaleUpCooldown:
    Type: Number
    Default: 30
    Description: Cooldown before next scaling up
  # deployment
  DeploymentMaximum:
    Type: Number
    Default: 200
    Description: Maximum percent parameter represents an upper limit on the number of tasks in a service
               that are allowed in the RUNNING or PENDING state during a deployment,
               as a percentage of the desired number of tasks
  # deployment
  DeploymentMinimum:
    Type: Number
    Default: 100
    Description: Minimum healthy percent represents a lower limit on the number of tasks in a service
                that must remain in the RUNNING state during a deployment, as a percentage of
                the desired number of tasks (rounded up to the nearest integer)
  # deployment subnet
  SubnetsScope:
    Description: 'Should the service have direct access to the Internet or do you prefer private subnets with NAT?'
    Type: String
    Default: Public
    AllowedValues:
    - Public
    - Private
  LogRetentionInDays:
    Type: String
    Default: "3"
Conditions:
  HasSubnetsReachPublic: !Equals [!Ref SubnetsScope, Public]
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [!Ref 'ServiceName', !Ref 'EnvironmentName']]
      RetentionInDays: !Ref 'LogRetentionInDays'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ECSServiceExecutionTaskRole']]
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          #Command: 
          Essential: true
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          # HealthCheck:
          #   Command: 
          #     - 'CMD STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80/); [[ $STATUS -eq 200 ]] || echo "[HealthCheck] Failed: Received status code: $STATUS" ; exit 1;'
          #   Interval: 30
          #   Timeout: 10
          #   Retries: 1
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['-', [!Ref 'ServiceName', !Ref 'EnvironmentName']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
          #Environment:
  # ServiceSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Sub '${EnvironmentName}-${ServiceName}-service'
  #     VpcId:
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'EnvironmentName', 'VPCId']]
  #     SecurityGroupIngress:
  #     - SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClusterStack}-LoadBalancerSecurityGroup'}
  #       FromPort: !If [HasProxyImage, !Ref ProxyPort, !Ref AppPort]
  #       ToPort: !If [HasProxyImage, !Ref ProxyPort, !Ref AppPort]
  #       IpProtocol: tcp
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      #- ALBListenerRule
      - ALBListenerRuleSSL
      #- NLBListenerRuleSSL
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
      LaunchType: FARGATE
      PlatformVersion: "1.4.0"
      DeploymentConfiguration:
        MaximumPercent: !Ref DeploymentMaximum
        MinimumHealthyPercent: !Ref DeploymentMinimum
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !If [HasSubnetsReachPublic, ENABLED, DISABLED]
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']]
            # - Fn::ImportValue:
            #     !Join [':', [!Ref 'EnvironmentName', 'MySQLSecurityGroup']]
            # - Fn::ImportValue:
            #     !Join [':', [!Ref 'EnvironmentName', 'MongoSecurityGroup']]
            # - Fn::ImportValue:
            #     !Join [':', [!Ref 'EnvironmentName', 'RedisSecurityGroup']]
          Subnets: !Split [',', {'Fn::ImportValue': !Join [':', [!Ref 'EnvironmentName', !Sub '${SubnetsScope}Subnets']] }]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'ALBTargetGroup'
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # Health checks
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: "443"
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200-299"
      # Routing
      TargetType: ip
      Port: !Ref 'ContainerPort'
      Protocol: !Ref 'ContainerProtocol'
      # Attributes
      TargetGroupAttributes:
        # - Key: "stickiness.enabled"
        #   Value: "true"
        # - Key: "stickiness.type"
        #   Value: "lb_cookie"
        # - Key: "stickiness.lb_cookie.duration_seconds"
        #   Value: "60"
        # - Key: "deregistration_delay.timeout_seconds"
        #   Value: "0"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "load_balancing.algorithm.type"
          Value: "least_outstanding_requests"
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'VPCId']]
      Tags:
        - Key: 'Name'
          Value: !Join ["-", [ "PLIZI" , !Ref 'AWS::Region', !Ref 'ServiceName' , !Ref 'EnvironmentName' , "ALB", "TG"]]
  # NLBTargetGroupSSL:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Join ["-", [ "NLB", !Ref 'ServiceName', !Ref 'ContainerPort', !Ref 'ContainerProtocol', "TG"]]
  #     # Health checks
  #     HealthCheckIntervalSeconds: 30
  #     HealthCheckPath: /
  #     HealthCheckProtocol: TCP
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     UnhealthyThresholdCount: 2
  #     Matcher:
  #       HttpCode: "426"
  #     # Routing
  #     TargetType: ip
  #     Port: !Ref 'ContainerPort'
  #     Protocol: !Ref 'ContainerProtocol'
  #     # Attributes
  #     TargetGroupAttributes:
  #       - Key: stickiness.enabled
  #         Value: true
  #       - Key: stickiness.type
  #         Value: 'source_ip'
  #       - Key: slow_start.duration_seconds 
  #         Value: 30
  #       - Key: deregistration_delay.timeout_seconds
  #         Value: 30
  #       - Key: proxy_protocol_v2.enabled
  #         Value: true
  #     VpcId:
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'EnvironmentName', 'VPCId']]

  # ALBListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #     - Type: forward
  #       ForwardConfig:
  #         TargetGroups: 
  #          - TargetGroupArn: !Ref ALBTargetGroup
  #            Weight: 1
  #         # TargetGroupStickinessConfig: 
  #         #   DurationSeconds: 60
  #         #   Enabled: true
  #     Conditions:
  #       - Field: host-header
  #         Values: [!Ref 'Path']
  #     ListenerArn:
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'EnvironmentName', 'ALBListenerHTTP']]
  #     Priority: !Ref 'Priority'

  ALBListenerRuleSSL:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups: 
           - TargetGroupArn: !Ref ALBTargetGroup
             Weight: 1
          # TargetGroupStickinessConfig: 
          #   DurationSeconds: 60
          #   Enabled: true
      Conditions:
        - Field: host-header
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ALBListenerHTTPS']]
      Priority: !Ref 'Priority'

  # NLBListenerRuleSSL:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroups: 
  #         - TargetGroupArn: !Ref NLBTargetGroupSSL
  #           Weight: 1
  #         TargetGroupStickinessConfig: 
  #           DurationSeconds: 60
  #           Enabled: true
  #     Conditions:
  #       - Field: host-header
  #         Values: [!Ref 'Path']
  #     ListenerArn:
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'EnvironmentName', 'NLBListenerNginxSSL']]
  #     Priority: !Ref 'Priority'
  
  # Enable autoscaling for this service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: 'ecs'
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
            - !Ref 'ServiceName'
      MinCapacity: !Ref MinCapacity
      MaxCapacity: !Ref MaxCapacity
      RoleARN:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'AutoscalingRole']]

  # Create scaling policies for the service
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: 'Average'
        Cooldown: !Ref ScaleDownCooldown

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: 'Average'
        Cooldown: !Ref ScaleUpCooldown

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - low-cpu
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "Low CPU utilization for service"
            - !Ref 'ServiceName'
            - "in stack"
            - !Ref 'EnvironmentName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
      Statistic: Average
      Period: !Ref LowCpuPeriodAlarm
      EvaluationPeriods: 1
      Threshold: !Ref LowCpuThresholdAlarm
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - high-cpu
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "High CPU utilization for service"
            - !Ref 'ServiceName'
            - "in stack"
            - !Ref 'EnvironmentName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
      Statistic: Average
      Period: !Ref HighCpuPeriodAlarm
      EvaluationPeriods: 1
      Threshold: !Ref HighCpuThresholdAlarm
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  # Route53
  ALBRecordSetPublicNginx:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: 
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'PublicDNSHostedZone']]
      Name: !Sub '${SubDomainNameOne}.${DomainName}'
      Type: A
      AliasTarget:
        HostedZoneId: 
          Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'ALBCanonicalHostedZoneID']]
        DNSName:
          Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'ALBDNSName']]
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

Outputs:
  # Route 53
  ALBRecordSetPublicNginx:
    Description: Arn ID of ALBRecordSetPublicNginx
    Value: !Ref 'ALBRecordSetPublicNginx'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'ALBRecordSetPublicNginx' ] ]